services:
    gitlab:
        image: gitlab/gitlab-ce:17.11.1-ce.0 # 推荐指定具体版本
        container_name: gitlab
        restart: unless-stopped # 自动重启策略
        shm_size: "256m" # 共享内存大小
        environment:
            TZ: Asia/Shanghai # 容器时区设置
            # 直接将配置内容写入 GitLab 的主配置文件 /etc/gitlab/gitlab.rb，并覆盖默认配置
            GITLAB_OMNIBUS_CONFIG: |
                # 基础配置
                external_url 'http://localhost:8090'  # 注意：地址中的端口会指示 Nginx 监听容器内部的 8090 端口。若未指定端口，默认使用 80
                gitlab_rails['time_zone'] = 'Asia/Shanghai'

                # SSH 配置
                gitlab_rails['gitlab_shell_ssh_port'] = 2222

                # 资源优化
                puma['enable'] = true
                puma['ha'] = false
                puma['worker_timeout'] = 60
                puma['worker_processes'] = 2
                puma['min_threads'] = 2
                puma['max_threads'] = 2     
                sidekiq['max_concurrency'] = 5          # 默认 25

                # 监控：禁用减少初始化负载
                prometheus_monitoring['enable'] = false  # 监控指标采集

                # 日志配置
                logging['logrotate_frequency'] = 'daily'   # 日志轮转
                logging['logrotate_rotate'] = 7

        # 监控容器内应用的健康状态，通过定期执行自定义命令判断服务是否正常运行。
        healthcheck:
            test: ["CMD", "/opt/gitlab/bin/gitlab-healthcheck"]
            interval: 60s
            timeout: 15s
            retries: 3
            start_period: 15m # 启动宽限期，给予 GitLab 足够的初始化时间

        ports:
            - "8090:8090"
            - "443:443"
            - "2222:22"

        volumes:
            # 使用数据卷持久化存储
            - gitlab_config:/etc/gitlab # 配置文件目录
            - gitlab_logs:/var/log/gitlab
            - gitlab_data:/var/opt/gitlab # 数据文件目录

        networks:
            - gitlab-network

        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: 8G
                reservations:
                    memory: 2G

    gitlab-runner:
        image: gitlab/gitlab-runner:v17.11.0
        container_name: gitlab-runner
        restart: unless-stopped
        depends_on:
            gitlab:
                condition: service_healthy # 确保 Runner 仅在 GitLab 健康后启动：

        environment:
            TZ: Asia/Shanghai
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock # 挂载 Docker Socket（使用 Docker Executor 必须）
            - runner_config:/etc/gitlab-runner
            - runner_cache:/var/lib/gitlab-runner/cache
            - runner:/home/gitlab-runner
        networks:
            - gitlab-network
        deploy:
            resources:
                limits:
                    cpus: "1.0"
                    memory: 2G

# 定义数据卷
# 注意：生成的数据名称默认是当前所在目录名称作为前缀_+ 定义的名字
volumes:
    gitlab_config:
        name: gitlab_config # 无前缀
        external: true # 迁移数据卷的时候加，新部署不需要
    gitlab_logs:
        name: gitlab_logs
    gitlab_data:
        name: gitlab_data
        external: true
    runner_config:
        name: runner_config
    runner_cache:
        name: runner_cache
    runner:
        name: runner

networks:
    gitlab-network:
        name: gitlab-network
        driver: bridge # 创建独立的 bridge 网络，使 GitLab 容器与其他 Docker 网络隔离，提升安全性
        # ipam:
        #     config:                      # 指定子网范围为 172.20.0.1 至 172.20.0.254
        #         - subnet: 172.20.0.0/24  # 避免与宿主机或其他 Docker 网络（如默认的 172.17.0.0/16）发生 IP 冲突
