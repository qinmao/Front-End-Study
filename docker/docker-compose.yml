version: "3.9"

# nodejs 的完整配置示例

# 环境变量统一管理（通过 .env 文件注入）
x-env: &env
    NODE_ENV: production
    TZ: Asia/Shanghai
    MEMORY_LIMIT: 4096 # MB

services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
            args:
                NODE_ENV: production
        image: my-node-app:1.0.0
        container_name: node-app
        restart: unless-stopped
        user: "node" # 非 root 用户运行
        working_dir: /usr/src/app
        environment:
            <<: *env
            PORT: 3000
        ports:
            - "3000:3000"
        volumes:
            - app_data:/usr/src/app/data
            - /etc/localtime:/etc/localtime:ro
        networks:
            - app-network
        healthcheck:
            test:
                ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 10s
        deploy:
            resources:
                limits:
                    cpus: "2.0"
                    memory: ${MEMORY_LIMIT}M
                reservations:
                    memory: 512M
        security_opt:
            - no-new-privileges:true
        tmpfs:
            - /tmp
        logging:
            driver: json-file
            options:
                max-size: "10m"
                max-file: "3"

    # PostgreSQL 数据库
    postgres:
        image: postgres:15-alpine
        container_name: postgres-db
        restart: unless-stopped
        environment:
            POSTGRES_USER: ${DB_USER}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
            POSTGRES_DB: ${DB_NAME}
        volumes:
            - pg_data:/var/lib/postgresql/data
            - ./postgres/backups:/backups
        networks:
            - app-network
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
            interval: 30s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    memory: 1G

    # Redis 缓存
    redis:
        image: redis:7-alpine
        container_name: redis-cache
        command: redis-server --save 60 1 --loglevel warning
        restart: unless-stopped
        volumes:
            - redis_data:/data
        networks:
            - app-network
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
        deploy:
            resources:
                limits:
                    memory: 512M

volumes:
    app_data:
        driver_opts:
            type: none
            o: bind
            device: /data/node-app
            uid: 1000 # node 用户 UID
    pg_data:
    redis_data:

networks:
    app-network:
        driver: bridge
        ipam:
            config:
                - subnet: 10.1.0.0/24
                  gateway: 10.1.0.1
